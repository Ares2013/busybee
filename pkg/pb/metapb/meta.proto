syntax = "proto3";
package metapb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

// BMLoader bitmap loader type
enum BMLoader {
    RawLoader        = 0;
    KVLoader         = 1;
    KVShardLoader    = 2;
    ClickhouseLoader = 3;
}

// TenantQueue queue metadata
message TenantQueue {
    uint32 partitions      = 1;
    int64  consumerTimeout = 2;
}

// Tenant tenant metadata
message Tenant {
    uint64      id     = 1 [(gogoproto.customname) = "ID"];
    TenantQueue output = 2 [(gogoproto.nullable) = false];
}

// WorkflowInstanceState workflow instance state
enum WorkflowInstanceState {
    Starting = 0;
    Running  = 1;
    Stopping = 2;
    Stopped  = 3;
}

// EventType tenant input event type
enum EventType {
    UserType           = 0;
    UpdateCrowdType    = 1;
    UpdateWorkflowType = 2;
}

// ShardBitmapPutMeta shard bitmap put meta
message ShardBitmapPutMeta {
    bytes  key           = 1;
    uint32 ttl           = 2 [(gogoproto.customname) = "TTL"];
	uint32 bytesPerShard = 3;
}

// ShardBitmapLoadMeta shard bitmap load meta
message ShardBitmapLoadMeta {
    bytes  key    = 1;
    uint64 Total  = 2;
    uint32 shards = 3;
}

// IDValue is a id value
message IDValue {
    string value  = 1;
    string type   = 2;
}

// IDSet id set
message IDSet {
    repeated IDValue values = 1 [(gogoproto.nullable) = false];
}

// Event tenant event
message Event {
    EventType           type           = 1;
    UserEvent           user           = 2;
    UpdateCrowdEvent    updateCrowd    = 3;
    UpdateWorkflowEvent updateWorkflow = 4;
}

// UpdateCrowdEvent update crowd event
message UpdateCrowdEvent {
    uint64 workflowID = 1;
    uint32 index      = 2;
    bytes  crowd      = 3;
}

// UpdateWorkflowEvent update crowd event
message UpdateWorkflowEvent {
    metapb.Workflow workflow = 1 [(gogoproto.nullable) = false];
}

// UserEvent is process definition
message UserEvent {
    uint32 userID     = 1;
    uint64 tenantID   = 2;
    uint64 workflowID = 3;
    uint64 instanceID = 4;
    repeated KV data  = 5 [(gogoproto.nullable) = false];
}

// KV custom KV data
message KV {
    bytes key   = 1;
    bytes value = 2;
}

// Notify notify message
message Notify {
    uint32 userID         = 1;
    bytes  crowd          = 2;
    uint64 tenantID       = 3;
    uint64 workflowID     = 4;
    uint64 instanceID     = 5;
    string fromStep       = 6;
    string fromAction     = 7;
    string toStep         = 8;
    string toAction       = 9;
    int32  toStepCycleTTL = 10;
}

// Group shard group
enum Group {
    DefaultGroup      = 0;
    TenantInputGroup  = 1;
    TenantOutputGroup = 2;
}

// Workflow is process definition
message Workflow {
    uint64         id        = 1 [(gogoproto.customname) = "ID"];
    uint64         tenantID  = 2;
    string         name      = 3;
    repeated Step  steps     = 4 [(gogoproto.nullable) = false];
    int64          stopAt    = 5;
}

// WorkflowInstance workflow instance
message WorkflowInstance {
    Workflow              snapshot    = 1 [(gogoproto.nullable) = false];
    uint64                instanceID  = 2;
    bytes                 loaderMeta  = 3;
    BMLoader              loader      = 4;
    uint64                totalCrowd  = 5;
    uint64                workers     = 6;
    int64                 startedAt   = 7;
    int64                 stoppedAt   = 8;
    uint64                version     = 9;
    WorkflowInstanceState state       = 10;
}

// WorkflowInstanceSnapshot workflow instance snapshpot
message WorkflowInstanceSnapshot {
    WorkflowInstance   snapshot  = 1 [(gogoproto.nullable) = false];
    int64              timestamp = 2;
    repeated StepState states    = 3 [(gogoproto.nullable) = false];
}

// WorkflowInstanceWorkerState workflow instance state. instance : instanceState = 1 : N
message WorkflowInstanceWorkerState {
    uint64             tenantID   = 1;
    uint64             workflowID = 2;
    uint64             instanceID = 3;
    uint32             index      = 4;
    repeated StepState states     = 5 [(gogoproto.nullable) = false];
    uint64             version    = 6;
    int64              stopAt     = 7;
}

// CountState step count state
message CountState {
    string step  = 1;
    uint64 count = 2;
}

// InstanceCountState active instance count state
message InstanceCountState {
    Workflow snapshot          = 1 [(gogoproto.nullable) = false];
    repeated CountState states = 2 [(gogoproto.nullable) = false];
    uint64   total             = 3;
}

// StepState workflow step state.
message StepState {
    Step     step       = 1 [(gogoproto.nullable) = false];
    uint64   totalCrowd = 2;
    BMLoader loader     = 3;
    bytes    loaderMeta = 4;
}

// Step is a step of the work flow
message Step {
    string    name        = 1;
    Execution execution   = 2 [(gogoproto.nullable) = false];
    string    enterAction = 3;
    string    leaveAction = 4;
    int32     ttl         = 5 [(gogoproto.customname) = "TTL"];
}

// ExectuionType is is the type of a execution operation
enum ExectuionType {
    // Direct is an executable operation.
    Direct    = 0;
    // Timer is an timer executable.
    Timer     = 1;
    // Branch contains several of the operations that will be performed if certain conditions are met.
    Branch    = 2;
    // Parallel contains multiple sets of operations that can be executed concurrently.
    Parallel  = 3;
}

// Execution is node operation in a seqence of executions.
// A node may have the following roles:
// 1. DirectExecution
// 2. BranchExecution
// 3. ParallelExecution 
message Execution {
    ExectuionType               type      = 1;
    TimerExecution              timer     = 2;
    DirectExecution             direct    = 3;
    repeated ConditionExecution branches  = 4 [(gogoproto.nullable) = false];
    ParallelExecution           parallel  = 5 [(gogoproto.nullable) = false];
}

// TimerExecution is a timer performable operation
message TimerExecution {
    Expr   condition           = 1;
    string cron                = 2;
    string nextStep            = 3;
    bool   useStepCrowdToDrive = 4;
}

// ParallelExecution is a parallel execution
message ParallelExecution {
    string             nextStep  = 1;
    repeated Execution parallels = 2 [(gogoproto.nullable) = false];
}

// DirectExecution is a directly performable operation
message DirectExecution {
    string nextStep = 1;
}

// ConditionExecution is selecting multiple operations to satisfy the operation of the conditional operation
message ConditionExecution {
    Expr      condition = 1 [(gogoproto.nullable) = false];
    Execution execution = 2;
    string    nextStep  = 3;
}

// ExprResultType expr execute type
enum ExprResultType {
    BoolResult = 0;
    BMResult   = 1;
}

// Expr expr
message Expr {
    bytes          value = 1;
    ExprResultType type  = 2;
}

// QueueState queue state
message QueueState {
    uint32                  partitions = 1;
    uint32                  consumers  = 2;
    repeated Partiton       states     = 3 [(gogoproto.nullable) = false];
    int64                   timeout    = 4;
}

// Partiton partition state
message Partiton {
    uint32        consumer       = 1;
    uint64        version        = 2;
    PartitonState state          = 3;
    uint64        completed      = 4;
    uint64        lastFetchCount = 5;
    int64         lastFetchTS    = 6;
}

// PartitonState partition state
enum PartitonState {
    PSRebalancing = 0;
    PSRunning     = 1;
}

// message CallbackAction
message CallbackAction {
    SetKVAction setKV = 1;
}

// SetKVAction set kv action
message SetKVAction {
    KV    kv    = 1 [(gogoproto.nullable) = false, (gogoproto.customname) = "KV"];
    Group group = 2;
}